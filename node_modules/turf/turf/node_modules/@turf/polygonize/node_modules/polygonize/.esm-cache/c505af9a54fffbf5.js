let fs;_54f‍.w('fs',[["default",function(v){fs=v}]]);let test;_54f‍.w('tape',[["default",function(v){test=v}]]);let path;_54f‍.w('path',[["default",function(v){path=v}]]);let load;_54f‍.w('load-json-file',[["default",function(v){load=v}]]);let write;_54f‍.w('write-json-file',[["default",function(v){write=v}]]);let featureEach;_54f‍.w('@turf/meta',[["featureEach",function(v){featureEach=v}]]);let featureCollection,lineString,polygon,point;_54f‍.w('@turf/helpers',[["featureCollection",function(v){featureCollection=v}],["lineString",function(v){lineString=v}],["polygon",function(v){polygon=v}],["point",function(v){point=v}]]);let polygonize;_54f‍.w('./',[["default",function(v){polygonize=v}]]);








var directories = {
  in: path.join(__dirname, '..', 'test', 'in') + path.sep,
  out: path.join(__dirname, '..', 'test', 'out') + path.sep
};

var fixtures = fs.readdirSync(directories.in).map(function (filename) {
  return {
    filename: filename,
    name: path.parse(filename).name,
    geojson: load.sync(directories.in + filename)
  };
});

test('turf-polygonize', function (t) {
  var _loop = function _loop(filename, name, geojson) {
    var polygonized = polygonize(geojson);

    var results = featureCollection([]);
    featureEach(geojson, function (feature) {
      return results.features.push(colorize(feature));
    });
    featureEach(polygonized, function (feature) {
      return results.features.push(colorize(feature, '#00F', 3));
    });

    if (process.env.REGEN) write.sync(directories.out + filename, results);
    t.deepEquals(results, load.sync(directories.out + filename), name);
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = fixtures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;
      var filename = _ref.filename;
      var name = _ref.name;
      var geojson = _ref.geojson;

      _loop(filename, name, geojson);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  t.end();
});

test('turf-polygonize -- Geometry Support', function (t) {
  var line = lineString([[0, 0], [1, 1], [5, 2], [0, 0]]);

  t.assert(polygonize(line.geometry), 'line geometry');
  t.end();
});

test('turf-polygonize -- throws', function (t) {
  t.throws(function () {
    return polygonize(point([0, 0]));
  }, 'input point');
  t.throws(function () {
    return polygonize(polygon([]));
  }, 'input polygon');
  t.end();
});

test('turf-polygonize -- input mutation', function (t) {
  var lines = featureCollection([lineString([[0, 0], [1, 1]]), lineString([[1, 1], [-1, -1]]), lineString([[-1, -1], [0, 0]])]);
  var linesBefore = JSON.parse(JSON.stringify(lines));
  polygonize(lines);

  t.deepEquals(lines, linesBefore, 'input does not mutate');
  t.end();
});

function colorize(feature) {
  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#F00';
  var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6;

  feature.properties['fill'] = color;
  feature.properties['fill-opacity'] = 0.3;
  feature.properties['stroke'] = color;
  feature.properties['stroke-width'] = width;
  return feature;
}