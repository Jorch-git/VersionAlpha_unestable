let fs;_cf6‍.w('fs',[["default",function(v){fs=v}]]);let path;_cf6‍.w('path',[["default",function(v){path=v}]]);let load;_cf6‍.w('load-json-file',[["default",function(v){load=v}]]);let Benchmark;_cf6‍.w('benchmark',[["default",function(v){Benchmark=v}]]);let polygonize;_cf6‍.w('./',[["default",function(v){polygonize=v}]]);





var directory = path.join(__dirname, '..', 'test', 'in') + path.sep;
var fixtures = fs.readdirSync(directory).map(function (filename) {
  return {
    name: path.parse(filename).name,
    geojson: load.sync(directory + filename)
  };
});

/**
 * Single Process Benchmark
 *
 * complex: 35.348ms
 * cutedge: 0.725ms
 * dangle: 0.166ms
 * geometry-collection-two-polygons: 0.455ms
 * kinked-linestring: 0.240ms
 * linestrings: 0.200ms
 * multi-linestring: 1.657ms
 * two-polygons: 0.293ms
 */
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = fixtures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var _ref = _step.value;
    var name = _ref.name;
    var geojson = _ref.geojson;

    console.time(name);
    polygonize(geojson);
    console.timeEnd(name);
  }

  /**
   * Benchmark Results
   *
   * complex x 68.00 ops/sec ±1.09% (69 runs sampled)
   * cutedge x 10,170 ops/sec ±1.65% (87 runs sampled)
   * dangle x 20,439 ops/sec ±0.74% (89 runs sampled)
   * geometry-collection-two-polygons x 14,530 ops/sec ±1.26% (89 runs sampled)
   * kinked-linestring x 17,258 ops/sec ±1.04% (91 runs sampled)
   * linestrings x 11,036 ops/sec ±0.56% (90 runs sampled)
   * multi-linestring x 20,942 ops/sec ±1.26% (91 runs sampled)
   * two-polygons x 14,522 ops/sec ±1.32% (91 runs sampled)
   */
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var suite = new Benchmark.Suite('turf-transform-polygonize');

var _loop = function _loop(_name, _geojson) {
  suite.add(_name, function () {
    return polygonize(_geojson);
  });
};

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = fixtures[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var _ref2 = _step2.value;
    var _name = _ref2.name;
    var _geojson = _ref2.geojson;

    _loop(_name, _geojson);
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2.return) {
      _iterator2.return();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

suite.on('cycle', function (e) {
  return console.log(String(e.target));
}).on('complete', function () {}).run();